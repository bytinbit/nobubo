[project]
name = "nobubo"
version = "1.6.0"
description = "Nobubo assembles a digital pdf sewing pattern and cuts it up into a desired output print size. A specialized n-up tool also suited for non-sewing purposes."
authors = [{ name = "bytinbit" }]
license = "AGPL v3.0"
readme = "README.md"
homepage = "https://github.com/bytinbit/nobubo"
repository = "https://github.com/bytinbit/nobubo"
requires-python = ">=3.12"
classifiers =  [
        "Topic :: Printing",
        "Topic :: Utilities",
        "Topic :: Multimedia :: Graphics :: Graphics Conversion",
        "License :: OSI Approved :: GNU Affero General Public License v3",
    ]
packages = [
	{ include = "nobubo", from = "src"},
]
dependencies = [
    "click>=8.1.3",
    "pikepdf>=9.4.2"
]

[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"

[project.scripts]
nobubo = "nobubo.cli:main"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
tox = "^4.5.1"
mypy = "^1.14.1"
ruff = "^0.12.7"
pdfminer-six = "^20240706"



[tool.mypy]
python_version = "3.12"

### --strict
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_defs = true  
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
# warn_return_any = true
# no_implicit_reexport = true
# strict_equality = true

### Other strictness flags
warn_unreachable = true
disallow_any_unimported = false

### Output
show_error_codes = true
show_error_context = true
pretty = true

ignore_missing_imports = true

[tool.coverage.run]
omit = [
    "*/__init__.py",
    "*/__main__.py",
    ]

[tool.ruff]
line-length = 100
[tool.ruff.format]
# Use \n line endings for all files
line-ending = "lf"
quote-style = "double"

[tool.tox]
requires = ["tox>=4"]
envlist = ["testing", "typing", "linting", "formatting", "coverage"]
isolated_build = true
testpaths = "tests"
passenv = ["FORCE_COLOR"]

[tool.tox.env.testing]
description = "run pytest"
deps = ["pytest", "pytest-cov", "pdfminer-six"]
commands = [["pytest", { replace = "posargs", default = ["tests"], extend = true } ]]

[tool.tox.env.typing]
description = "check typing with mypy"
skip_install = true
deps = ["mypy", "pytest", "pdfminer-six"]
commands = [["mypy", "--install-types"], ["mypy", { replace = "posargs", default = ["src{/}nobubo", "tests"], extend = true } ]]

[tool.tox.env.linting]
description = "run ruff for linting"
skip_install = true
deps = ["ruff"]
commands = [["ruff", "check", { replace = "posargs", default = ["src{/}nobubo", "tests"], extend = true } ]]

[tool.tox.env.formatting]
description = "run ruff for formatting"
skip_install = true
deps = ["ruff"]
commands = [["ruff", "format", "--check",  "src{/}nobubo", "tests"]]

[tool.tox.env.coverage]
description = "run pytest with coverage"
deps = ["pytest", "pytest-cov", "pdfminer-six"]
commands = [["pytest", "tests", "--cov=nobubo", "--cov-report", "html:htmlcov"]]

[tool.tox.env.pikepdf-main]
description = "run project tests against pikepdf-main branch"
deps = ["git+https://github.com/pikepdf/pikepdf#master", "pytest", "pytest-cov", "rich", "pdfminer-six"]

commands = [["pytest", { replace = "posargs", default = ["tests"], extend = true } ]]
